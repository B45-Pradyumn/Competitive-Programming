class Solution {
    public int maximalRectangle(char[][] matrix) {
        int[] arr = new int[matrix[0].length]; 
        int area = 0;
        for(int i = 0; i<matrix.length; i++){
            for(int j = 0; j<matrix[0].length; j++){
                if(matrix[i][j] == '1'){
                    arr[j]++;
                }else arr[j] = 0;
                
            }
            area = Math.max(area, largestRectangleArea(arr));
        }

        return area;    
    }
    
    public int largestRectangleArea(int[] heights) {
        ArrayDeque<Integer> st = new ArrayDeque<>();
        st.push(-1);
        int maxArea = 0;
        for(int i = 0; i<=heights.length; i++){
            int val = i==heights.length?0:heights[i];
            while(st.peek()!=-1 && heights[st.peek()]>=val){
                int rm = i;
                int h = heights[st.pop()];
                int lm = st.peek();
                maxArea = Math.max(maxArea, h*(rm-lm-1));
            }
            st.push(i);
        }
        return maxArea;
    }
}
